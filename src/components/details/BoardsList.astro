---
import { getAllSysData, type SysMetaData } from "@/lib/data";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { statusClassMap } from "@/config/site";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export interface Props {
  system: string;
}

// TODO: add i18n

const { system } = Astro.props;

const SysData = await getAllSysData();

// Filter systems by the current system name
const currentSysData = SysData.filter((sys) => sys.sysDir === system);

// Get unique boards for this system
const boards = [...new Set(currentSysData.map((sys) => sys.boardDir))];

// Group systems by board
interface BoardGroup {
  board: string;
  systems: SysMetaData[];
}

const boardGroups: BoardGroup[] = boards.map((board) => ({
  board,
  systems: currentSysData.filter((sys) => sys.boardDir === board),
}));
---

{
  boardGroups.length > 0 ? (
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {boardGroups.map((group: BoardGroup) => (
        <Card>
          <CardHeader>
            {/* FIXME: use board.product */}
            <CardTitle>{group.board}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {group.systems.map((sys: SysMetaData) => (
              <a
                href={getRelativeLocaleUrl(
                  lang,
                  `reports/${sys.boardDir}-${sys.sysDir}-${sys.fileName}`,
                  {
                    normalizeLocale: false,
                  },
                )}
                class=""
              >
                <div class="border-t pt-4">
                  <div class="flex justify-between items-center">
                    <div>
                      <p class="text-lg">{sys.sysDir}</p>
                      {sys.sys_ver && (
                        <p class="text-sm text-muted-foreground">
                          {t("sys.version")} {sys.sys_ver}
                        </p>
                      )}
                      {sys.sys_var && (
                        <p class="text-sm text-muted-foreground">
                          {t("sys.variant")} {sys.sys_var}
                        </p>
                      )}
                    </div>
                    {(() => {
                      const status = sys.status;
                      const statusClass =
                        statusClassMap[status] ?? statusClassMap.UNKNOWN;

                      return (
                        <span
                          class={`inline-block px-2 rounded-md font-medium ${statusClass}`}
                        >
                          {status}
                        </span>
                      );
                    })()}
                  </div>
                  {sys.last_update && (
                    <p class="text-sm text-muted-foreground mt-2">
                      {t("sys.update")}
                      {new Date(sys.last_update).toLocaleDateString()}
                    </p>
                  )}
                </div>
              </a>
            ))}
          </CardContent>
        </Card>
      ))}
    </div>
  ) : (
    <div class="text-center py-12">
      <p class="text-xl text-muted-foreground">
        No boards found supporting {system}
      </p>
    </div>
  )
}
